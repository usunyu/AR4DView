Version
-------
v1.1

Change Log 
----------
v1.1 : Add decoding algorithms for supporting the new compression features of the 4dr formats 
v1.0.1 : Fix bug concerning the Decoder4DR_GL draw method (conflicts with other VAO)


Compilation
-----------
Add the 4DViews framework in the Embedded Binaries list in the General tab of your project.


Deployement target
------------------
iOS 6.0 minimum



Usage
-----

* Decoding a single mesh

Create a Decoder4DR object by using a NSData corresponding to the 4DR data with 'initFromData' or
by using a 4DR url (local or web) with 'initFromURL'.

The texture and geometry data will be directly decoded an stored in the Decoder4DR object.

The vertex positions contained in the 4DR data are quantized positions as local offsets to the
mesh bounding box. The actual positions can be obtain in the m_mesh property if the decoder was
initialized with 'byDecompressingGeometry:YES'. This decompression is done by the decoder using the CPU.
For a fastest decoding, it is possible to use 'byDecompressingGeometry:NO'. The m_mesh property will
contain the quantized positions which have to be decoded later, by a vertex shader for example.

The texture format is PVRTC. The 4DR format can accept other texture formats but PVRTC is really
optimized for iOS application.

The m_texture property of the decoder object contains the compressed texture buffer which can be sent
directly to openGLES by using glCompressedTexImage2D and glCompressedTexSubImage2D.


* Decoding a sequence of meshes

Create a SequenceManager4DR by using a sequence.xml file with 'initWithDescriptor'. This xml file is generated by the 4DR converter.
You can also create SequenceManager4DR with path or file information with 'initWithPath' or 'initWithFile'.

SequenceManager4DR allows to configure playback, cache and buffer options.
Playback: controls framerate, frame droppping, repeat modes, ...
Cache: controls if raw or decoded data are keeped in memory
Buffer: controls if SequenceManager reads and decodes data in parallel of the playback
Delegate methods: for notifying a new mesh, a playback loop, ...


* Drawing a mesh

Decoder4DR_GL is a very optimized object for drawing Decoder4DR data in an openGL ES context.
We really advise to use it.

For drawing a Mesh stream, create only one Decoder4DR_GL with 'initWithShadowEnabled:(BOOL)shadow'.
In the opengl ES draw loop, update Decoder4DR_GL with a new mesh by calling 'update:(Decoder4DR*)decoder' and then
draw it by calling 'draw:(GLKMatrix4)MVPMatrix'.

In order to optimize the drawing for multi-passes rendering, all the data is transfered to the GPU in the 'update' function which
has to be called once for each new mesh. The 'draw' function can be called several time without using too much GPU resources.


